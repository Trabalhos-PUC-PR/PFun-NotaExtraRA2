module Main where
-- Exerc√≠cio 2 VALIDAR CART√ÉO DE CR√âDITO
-- No mundo real, o processo de valida√ß√£o de um n√∫mero de cart√£o de cr√©dito, √© um pouco mais complexo. Caber√° a voc√™ criar uma fun√ß√£o capaz de validar estes n√∫meros considerando a seguinte regra:
-- 1. Dobre o valor de cada segundo d√≠gito, come√ßando da direita, Ou seja, o √∫ltimo digito fica inalterado, o pen√∫ltimo √© dobrado, o antepen√∫ltimo n√£o e assim sucessivamente de tal forma que [1,3,8,6] ser√° transformado em [2,3,16,6].
-- 2. Some os d√≠gitos com os valores dobrados, ou n√£o: [2,3,16,6] ser√° transformado em 18.
-- 3. Encontre o resto da divis√£o desta soma por 10. Neste caso 8.
-- 4. Se o resultado for zero, ent√£o este n√∫mero √© v√°lido. 
pegaDoisEmDois lista
  | length lista < 2 = []
  | otherwise = head(tail(reverse lista)) : pegaDoisEmDois(init(init lista))

validaCartao :: [Int] -> Bool
validaCartao lista
  | length lista < 2 = False
  | mod (2 * sum (pegaDoisEmDois lista)) 10 == 0 = True
  | otherwise = False

-- Exerc√≠cio 1:  CALCULADORA

-- Voc√™ dever√° implementar, em Haskell, uma calculadora capaz de realizar, em n√∫meros reais, as quatro opera√ß√µes, as opera√ß√µes trigonom√©tricas (seno, cosseno e tangente) e as opera√ß√µes de exponencia√ß√£o (quadrado, cubo, raiz quadrada, raiz c√∫bica e x elevado a y). Usando nota√ß√£o rpn de tal forma que todas as opera√ß√µes sejam representadas por uma S-expression. Como mostrado no exemplo
-- a seguir:

-- ùëé) ( 3.4 5.0 +)
-- ùëè) ( 3.4 (3.0 2 ùê∏ùëãùëÉ) +)

-- Caber√° a voc√™ definir como ir√° separar os operandos de cada opera√ß√£o. Tamb√©m caber√° a voc√™ determinar as palavras chaves que usar√° para representar as opera√ß√µes trigonom√©tricas (seno, cosseno e tangente) e as opera√ß√µes de exponencia√ß√£o (quadrado, cubo, raiz quadrada, raiz c√∫bica e x elevado a y).

-- √â importante observar que as S-expressions podem ser aninhadas, como pode ser visto no exemplo b e que n√£o h√° limites para o aninhamento de express√µes. Al√©m disso, √© importante lembrar que algumas opera√ß√µes solicitadas s√£o un√°rias e outras s√£o bin√°rias.
-- calculaOp op
-- calculaOp = efetuaOp (words op)

-- efetuaOp 


  -- let cartao = [1,2,3,4 ,5,6,7,8, 9,1,2,3 ,4,5,6,7]
  -- print (validaCartao cartao)

exn :: (Floating a) => a -> a -> a
exn v1 v2 = v1 ** v2
sqr :: (Floating a) => a -> a 
sqr = (**2)
cbc :: (Floating a) => a -> a 
cbc = (**3)
sqR :: (Floating a) => a -> a 
sqR = (**(1/2))
cbR :: (Floating a) => a -> a 
cbR = (**(1/3))

parseSmallOp :: a -> (a -> a) -> a
parseSmallOp x f = f x
parseOp :: a -> a -> (a -> a -> a) -> a
parseOp x y f = f x y


applyF :: (a) -> (a) -> a  
applyF x f = f x


main :: IO ()
main = do  
  print (applyF (sqr 4) sqr)
  -- print (parseOp 1.5 3.5 (-))
  -- print (parseOp 1.5 3.5 (*))
  -- print (parseOp 1.5 3.5 (/))

  -- print (parseOp 1.5 3.5 exn)
  
  -- print (parseSmallOp 1.5 sin)
  -- print (parseSmallOp 1.5 cos)
  -- print (parseSmallOp 1.5 tan)

  
  -- print (parseSmallOp 1.5 sqr)
  -- print (parseSmallOp 1.5 cbc)
  -- print (parseSmallOp 1.5 sqR)
  -- print (parseSmallOp 1.5 cbR)
